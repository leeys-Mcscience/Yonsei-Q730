<?xml version="1.0"?>
<doc>
    <assembly>
        <name>McQLib</name>
    </assembly>
    <members>
        <member name="T:McQLib.Core.BaseSetting">
            <summary>
            설정값을 구성하기 위한 기본 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.BaseSetting.#ctor">
            <summary>
            기본 클래스의 내부 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.BaseSetting.Load(System.String)">
            <summary>
            지정된 파일로부터 설정값을 읽어옵니다.
            </summary>
            <returns>파일을 읽는데 성공했다면 true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
        <member name="M:McQLib.Core.BaseSetting.Save(System.String)">
            <summary>
            지정된 경로에 설정값을 저장합니다.
            <br><see cref="T:McQLib.Core.IDAttribute"/> 특성이 지정된 모든 Public 및 NonPublic 필드 및 속성의 값을 저장합니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Core.BaseSetting.Initialize">
            <summary>
            설정 값을 각 속성의 초기값으로 되돌립니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.BaseSetting.TryParse(System.String,System.Object@)">
            <summary>
            값 형식 또는 열거형 형식이 아닌 타입에 대해 문자열로부터의 변환을 구현하는 메서드입니다.
            <br>설정값을 읽어오는 과정에서 각 설정값에 대해 최초로 이 메서드를 호출하여 문자열을 변환하고자 하는 속성의 형식으로 변환을 시도합니다.</br>
            </summary>
            <param name="value">변환할 문자열입니다.</param>
            <param name="result">변환 결과값입니다.</param>
            <returns>변환에 성공했는지의 여부입니다.</returns>
        </member>
        <member name="T:McQLib.Core.Q_UInt16">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 16비트 부호 없는 정수(<see langword="ushort"/>) 자료형 구조체입니다.
            <br>혼동을 막기 위해 Offset으로의 직접 대입은 불가하며 생성자를 이용하여 패킷의 데이터를 패킷 상 바이트 오더 그대로 인수로 전달하십시오.</br>
            <br>Offset으로의 직접 대입을 사용하려면 안전하지 않은 형식 <see cref="T:McQLib.Core.Q_UInt16_Unsafe"/>을 사용하십시오.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_UInt32">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 32비트 부호 없는 정수(<see langword="uint"/>) 자료형 구조체입니다.
            <br>혼동을 막기 위해 Offset으로의 직접 대입은 불가하며 생성자를 이용하여 패킷의 데이터를 패킷 상 바이트 오더 그대로 인수로 전달하십시오.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_Float">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 단정밀도 부동 소수점(<see langword="float"/>) 자료형 구조체입니다.
            <br>혼동을 막기 위해 Offset으로의 직접 대입은 불가하며 생성자를 이용하여 패킷의 데이터를 패킷 상 바이트 오더 그대로 인수로 전달하십시오.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_Double">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 배정밀도 부동 소수점(<see langword="double"/>) 자료형 구조체입니다.
            <br>혼동을 막기 위해 Offset으로의 직접 대입은 불가하며 생성자를 이용하여 패킷의 데이터를 패킷 상 바이트 오더 그대로 인수로 전달하십시오.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_UInt16_Unsafe">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 16비트 부호 없는 정수(<see langword="ushort"/>) 자료형 구조체입니다.
            <br>안전하지 않은 형식으로, Offset에 바이트를 직접 대입할 수 있으나, 시스템 상 바이트 순서(Little Endian)로 저장됩니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_UInt32_Unsafe">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 32비트 부호 없는 정수(<see langword="uint"/>) 자료형 구조체입니다.
            <br>안전하지 않은 형식으로, Offset에 바이트를 직접 대입할 수 있으나, 시스템 상 바이트 순서(Little Endian)로 저장됩니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_Float_Unsafe">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 단정밀도 부동 소수점(<see langword="float"/>) 자료형 구조체입니다.
            <br>안전하지 않은 형식으로, Offset에 바이트를 직접 대입할 수 있으나, 시스템 상 바이트 순서(Little Endian)로 저장됩니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.Q_Double_Unsafe">
            <summary>
            Q통합 프로토콜 통신에 이용되는 바이트 순서(Big Endian)로 변경하기 위한 배정밀도 부동 소수점(<see langword="double"/>) 자료형 구조체입니다.
            <br>안전하지 않은 형식으로, Offset에 바이트를 직접 대입할 수 있으나, 시스템 상 바이트 순서(Little Endian)로 저장됩니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.DataBuilder">
            <summary>
            여러 형식의 값들을 바이트 형식으로 누적하여 관리하는 작업을 돕는 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.DataBuilder.Item(System.Int32)">
            <summary>
            데이터 빌더의 지정된 인덱스 위치에서 바이트값을 가져옵니다.
            </summary>
            <param name="index">바이트를 가져올 인덱스입니다.</param>
            <returns>지정된 위치의 바이트값입니다.</returns>
        </member>
        <member name="P:McQLib.Core.DataBuilder.Count">
            <summary>
            데이터 빌더에 포함된 바이트의 개수입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Byte[])">
            <summary>
            지정된 바이트 배열을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="values">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Enum)">
            <summary>
            지정된 열거형 값에 해당하는 정수값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Nullable{System.UInt32})">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Nullable{System.Double})">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Nullable{System.Single})">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(System.Boolean)">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(McQLib.Core.Q_UInt16)">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(McQLib.Core.Q_UInt32)">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(McQLib.Core.Q_Float)">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.Add(McQLib.Core.Q_Double)">
            <summary>
            지정된 값을 데이터 빌더의 끝에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.AddCount(System.Byte,System.Int32)">
            <summary>
            동일한 값 여러 개를 연속하여 리스트 뒤에 추가합니다.
            </summary>
            <param name="value">추가할 값입니다.</param>
            <param name="count">추가할 개수입니다.</param>
        </member>
        <member name="M:McQLib.Core.DataBuilder.#ctor">
            <summary>
            빈 데이터 빌더 인스턴스를 생성합니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.DataBuilder.ToByteArray">
            <summary>
            데이터 빌더의 요소를 새 배열에 복사하여 반환합니다.
            </summary>
            <returns>복사된 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Core.DataBuilder.op_Implicit(McQLib.Core.DataBuilder)~System.Byte[]">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="T:McQLib.Core.Result">
            <summary>
            Communicator에서 처리하는 직접 통신 메서드의 수행 결과를 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.Result.NoResponse">
            <summary>
            응답 없음
            </summary>
        </member>
        <member name="F:McQLib.Core.Result.InvalidSequence">
            <summary>
            유효하지 않은 시퀀스
            </summary>
        </member>
        <member name="F:McQLib.Core.Result.Sw_PacketError">
            <summary>
            소프트웨어에서 수신한 패킷의 프레임 오류
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.Complete">
            <summary>
            명령 정상 수행
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.ActionError">
            <summary>
            <b>[동작 오류]</b>
            설정한 에러가 동작 중 발생한 경우
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.InitializeError">
            <summary>
            <b>[장비 초기화 오류]</b>
            장비 초기화 수행 오류
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.PacketError">
            <summary>
            <b>[수신 프레임 오류]</b>
            수신된 데이터의 프레임 오류/CRC 오류
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.CommandError">
            <summary>
            <b>[수신 명령 오류]</b>
            수신된 명령이 존재하지 않음
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.OnBusyError">
            <summary>
            <b>[명령 수행 중 오류]</b>
            이전에 받은 명령을 수행 중인 경우
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.SetError">
            <summary>
            <b>[명령 설정 오류]</b>
            설정 동작 명령에 실패한 경우
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.SdCardError">
            <summary>
            <b>[SD 오류]</b>
            SD card의 공간 부족 등 오류가 검출되었을 경우
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.AddressError">
            <summary>
            <b>[주소 오류]</b>
            수신 주소 오류
            </summary>
        </member>
        <member name="F:McQLib.Core.ErrorField.UndefinedError">
            <summary>
            <b>[정의되지 않은 오류]</b>
            정의되지 않은 오류가 발생한 경우
            </summary>
        </member>
        <member name="T:McQLib.Core.Mode1">
            <summary>
            시퀀스 관련 패킷의 Mode1 필드에 사용되는 값의 열거형입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.Mode2">
            <summary>
            시퀀스 관련 패킷의 Mode2 필드에 사용되는 값의 열거형입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.SourcingType_Charge">
            <summary>
            충전 레시피의 충전 방식입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Charge.CC">
            <summary>
            CC모드 입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Charge.CCCV">
            <summary>
            CC-CV모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Charge.CP">
            <summary>
            CP모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Charge.CR">
            <summary>
            CR모드입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.SourcingType_Discharge">
            <summary>
            방전 레시피의 충전 방식입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Discharge.CC">
            <summary>
            CC모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Discharge.CP">
            <summary>
            CP모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Discharge.CR">
            <summary>
            CR모드입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.SourcingType_Anode">
            <summary>
            음극재 하프셀 레시피의 충방전 방식입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Anode.CC">
            <summary>
            CC모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SourcingType_Anode.CCCV">
            <summary>
            CC-CV모드입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.TrStepMode">
            <summary>
            TR 모드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TrStepMode.None">
            <summary>
            TR을 사용하지 않습니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TrStepMode.Before">
            <summary>
            측정 전에 TR를 측정합니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TrStepMode.After">
            <summary>
            측정 후에 TR을 측정합니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TrStepMode.All">
            <summary>
            측정 전과 후 모두 TR을 측정합니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.AmplifyMode">
            <summary>
            증폭 배율을 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.ScaleMode">
            <summary>
            데이터 스케일을 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.StoppedType">
            <summary>
            Recipe가 종료된 원인을 나타내는 열거형입니다.
            <br>종료되지 않았다면 <see cref="F:McQLib.Core.StoppedType.Run"/>입니다.</br>
            <br>이 항목은 채널의 현재 상태를 나타내지 않습니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.PatternBiasMode">
            <summary>
            패턴 레시피의 각 포인트를 인가하기 위한 모드를 타나내는 열거형입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.Address">
            <summary>
            ADDR과 CH 정보를 구성하는 구조체입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.Address.Master">
            <summary>
            마스터 보드를 지정하는 <see cref="T:McQLib.Core.Address"/> 인스턴스를 가져옵니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.Address.ADDR">
            <summary>
            ADDR (보드 번호)입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.Address.CH">
            <summary>
            CH (채널 번호)입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.Address.#ctor(System.Byte,System.Byte)">
            <summary>
            지정된 ADDR과 CH을 사용하여 새 <see cref="T:McQLib.Core.Address"/> 인스턴스를 생성합니다.
            </summary>
            <param name="localIndex">채널의 지역 인덱스입니다.</param>
            <param name="addr">ADDR (보드 번호)입니다.</param>
            <param name="ch">CH (채널 번호)입니다.</param>
        </member>
        <member name="M:McQLib.Core.Address.#ctor(System.Int32,System.Byte,System.Byte)">
            <summary>
            지정된 ADDR과 CH을 사용하여 새 <see cref="T:McQLib.Core.Address"/> 인스턴스를 생성합니다.
            </summary>
            <param name="localIndex">채널의 지역 인덱스입니다.</param>
            <param name="addr">ADDR (보드 번호)입니다.</param>
            <param name="ch">CH (채널 번호)입니다.</param>
        </member>
        <member name="M:McQLib.Core.Address.IsMaster(McQLib.Core.Address)">
            <summary>
            지정된 <see cref="T:McQLib.Core.Address"/> 구조체의 인스턴스가 나타내는 ADDR과 CH이 마스터 보드를 지정하는지의 여부입니다.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:McQLib.Core.MeasureData">
            <summary>
            한 포인트의 데이터 집합을 관리하기 위한 클래스입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData.RecipeType">
            <summary>
            현재 측정 데이터가 측정된 레시피의 종류입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData.IsRaw">
            <summary>
            현재 측정 데이터가 ACR, TR 등의 고속 측정 레시피의 Raw 데이터를 나타내는 인스턴스인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.TotalTime">
            <summary>
            전체 측정이 진행된 시간입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.TotalTime_Uint">
            <summary>
            필드4로부터 TotalTime(ms)을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StartTime">
            <summary>
            필드4로부터 StartTime(ms)을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.TotalTime_UInt">
            <summary>
            필드4로부터 TotalTime(ms)을 가져옵니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData.StepTime">
            <summary>
            이 필드는 장비로부터 전달받지 않습니다. 이전 스텝과의 TotalTime 차를 누적하여 채워야 합니다.
            <br>단, 고속 측정 데이터와 패턴 측정 데이터의 경우 이 필드를 가져옵니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StepTime_Uint">
            <summary>
            필드4로부터 StepTime(ms)을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StepCount">
            <summary>
            필드5로부터 StepCount를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StepNumber">
            <summary>
            필드6으로부터 StepNumber를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.CycleCount">
            <summary>
            필드7로부터 CycleCount를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Mode1">
            <summary>
            필드8로부터 Mode1을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Mode2">
            <summary>
            필드9로부터 Mode2를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.DataIndex">
            <summary>
            필드10으로부터 DataIndex를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Voltage">
            <summary>
            필드11로부터 Voltage(V)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Current">
            <summary>
            필드12로부터 Current(A)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Temperature">
            <summary>
            필드13으로부터 Temperature(℃)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Frequency">
            <summary>
            필드13으로부터 Frequency(Hz)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Capacity">
            <summary>
            필드14로부터 Capacity(Ah)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Z">
            <summary>
            필드14로부터 Z를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Power">
            <summary>
            필드15로부터 Power(W)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Phase">
            <summary>
            필드15로부터 Phase를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.R">
            <summary>
            필드15로부터 R을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.WattHour">
            <summary>
            필드16으로부터 WattHour(Wh)를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Z_Real">
            <summary>
            필드16으로부터 Z_Real을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.V1">
            <summary>
            필드16으로부터 V1을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.DeltaV">
            <summary>
            필드17로부터 DeltaV를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.Z_Img">
            <summary>
            필드17로부터 Z_Img를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.V2">
            <summary>
            필드17로부터 V2를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.DeltaI">
            <summary>
            필드18로부터 DeltaI를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StartOcv">
            <summary>
            필드18로부터 StartOcv를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.I1">
            <summary>
            필드18로부터 I1을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.DeltaT">
            <summary>
            필드19로부터 DeltaT를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.EndOcv">
            <summary>
            필드19로부터 EndOcv를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.I2">
            <summary>
            필드19로부터 I2를 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.StoppedType">
            <summary>
            필드20으로부터 StoppedType을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.MeasureData.TotalTimeOverflow">
            <summary>
            필드21로부터 TotalTimeOverflow를 가져옵니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field4">
            <summary>
            TotalTime 또는 StartTime으로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field5">
            <summary>
            StepCount로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field6">
            <summary>
            StepNumber로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field7">
            <summary>
            CycleCount로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field8">
            <summary>
            Mode1로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field9">
            <summary>
            Mode2로 사용됨
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field10">
            <summary>
            DataIndex로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field11">
            <summary>
            Voltage로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field12">
            <summary>
            Current로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field13">
            <summary>
            Temperature 또는 Frequency로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field14">
            <summary>
            Capacity 또는 Z로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field15">
            <summary>
            Power, Phase 또는 R로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field16">
            <summary>
            WattHour, Z_Real 또는 V1로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field17">
            <summary>
            DeltaV, Z_Img 또는 V2로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field18">
            <summary>
            DeltaI, StartOcv 또는 I1로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field19">
            <summary>
            DeltaT, EndOcv 또는 I2로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field20">
            <summary>
            StoppedType으로 사용됨.
            </summary>
        </member>
        <member name="F:McQLib.Core.MeasureData._field21">
            <summary>
            TotalTimeOverflow로 사용됨.
            </summary>
        </member>
        <member name="T:McQLib.Core.ChannelStateData">
            <summary>
            채널 상태 데이터(0x1100)용 클래스입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.ChannelData">
            <summary>
            모든 측정 데이터 패킷을 다루는 클래스의 부모 클래스가 되는 추상 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.ChannelData.Count">
            <summary>
            현재 데이터 개체에 포함된 <see cref="T:McQLib.Core.MeasureData"/> 개체의 개수입니다.
            </summary>
        </member>
        <member name="P:McQLib.Core.ChannelData.Item(System.Int32)">
            <summary>
            지정된 위치의 <see cref="T:McQLib.Core.MeasureData"/>를 가져옵니다.
            </summary>
            <param name="index">가져올 위치입니다.</param>
            <returns></returns>
        </member>
        <member name="T:McQLib.Core.ChannelSequenceData">
            <summary>
            채널별 Sequence 데이터(0x1111)용 클래스입니다.
            <br>Charge, Discharge, Rest, ACR(Summuary), FR(Summary)의 데이터를 처리할 수 있습니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.ChannelMeasureData">
            <summary>
            고속 측정 Seuqnece 데이터(0x1113)용 클래스입니다.
            <br>ACR, FR, TR의 Raw 데이터를 처리할 수 있습니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Core.ChannelPatternData">
            <summary>
            채널별 Pattern 데이터(0x1112)용 클래스입니다.
            <br>Pattern 데이터를 처리할 수 있습니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Core.PatternData.ToDataField(System.UInt16)">
            <summary>
            현재 패턴 데이터를 패킷의 DATA 필드 형태로 변환합니다.
            <br>하나의 패턴 데이터 패킷에는 최대 25개의 패턴 아이템이 포함될 수 있으며, 따라서 이 메서드가 반환하는 리스트에는 (<see cref="P:McQLib.Core.PatternData.TotalCount"/> / 25)개의 DATA 배열이 포함되어 있습니다.</br>
            </summary>
            <returns></returns>
        </member>
        <member name="T:McQLib.Core.Security">
            <summary>
            데이터를 암호화/복호화하는 기능이 구현된 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.Security.Encrypt(System.String,System.String)">
            <summary>
            원본 데이터를 지정된 암호화 키를 사용하여 암호화합니다.
            </summary>
            <param name="source">원본 데이터를 포함하는 문자열입니다.</param>
            <param name="publicKey">암호화 키를 포함하는 문자열입니다.</param>
            <returns>암호화된 결과를 나타내는 문자열입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Security.Decrypt(System.String,System.String)">
            <summary>
            암호화 데이터를 지정된 복호화 키를 사용하여 복호화합니다.
            </summary>
            <param name="source">암호화 데이터를 포함하는 문자열입니다.</param>
            <param name="publicKey">복호화 키를 포함하는 문자열입니다.</param>
            <returns>복호화된 결과를 나타내는 문자열입니다.</returns>
        </member>
        <member name="T:McQLib.Core.SiUnits">
            <summary>
            SI 단위계를 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SiUnits.Kilo">
            <summary>
            10^3 단위의 값입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SiUnits.Default">
            <summary>
            10^0 단위의 값입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SiUnits.Milli">
            <summary>
            10^-3 단위의 값입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SiUnits.Micro">
            <summary>
            10^-6 단위의 값입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.SiUnits.Nano">
            <summary>
            10^-9 단위의 값입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.TimeUnit">
            <summary>
            시간 단위를 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TimeUnit.Hour">
            <summary>
            시간입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TimeUnit.Minute">
            <summary>
            분입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TimeUnit.Second">
            <summary>
            초입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.TimeUnit.MilliSecond">
            <summary>
            밀리 초입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.UnitType">
            <summary>
            값이 사용할 단위의 종류를 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.UnitType.Voltage">
            <summary>
            전압입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.UnitType.Current">
            <summary>
            전류입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.UnitType.Power">
            <summary>
            전력입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.UnitType.Resistance">
            <summary>
            저항입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.UnitType.Time">
            <summary>
            시간입니다.
            </summary>
        </member>
        <member name="T:McQLib.Core.UnitInfo">
            <summary>
            유닛 구성 설정을 저장 및 관리하는 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.UnitInfo.GetString(System.Double,System.Int32)">
            <summary>
            지정된 SI 단위계의 Default 형식 값(10의 0승)을 현재 <see cref="T:McQLib.Core.UnitInfo"/> 개체가 가지는 SI 단위계 자릿수 값을 반영한 문자열 표현으로 변환합니다.
            </summary>
            <param name="value">변환할 값입니다.</param>
            <param name="forcedDecimalPlace">소숫점 이하 몇자리까지 표기할지의 값입니다. 기본값은 -1이며, 기본값으로 지정된 경우 <see cref="P:McQLib.Core.UnitInfo.DecimalPlace"/>가 자릿수를 지정하는데 사용됩니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Core.UnitInfo.change(System.Double,McQLib.Core.SiUnits)">
            <summary>
            지정된 실수의 단위를 SI 단위계를 사용하여 변환합니다.
            </summary>
            <param name="value">SI 단위계 상 10의 0승 값(V, A, W 등)입니다. </param>
            <param name="unit">변환할 SI 단위계 값 입니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Core.UnitInfo.change(System.Double,McQLib.Core.TimeUnit)">
            <summary>
            지정된 밀리초 시간 값을 시간 단위를 사용하여 변환합니다.
            </summary>
            <param name="value">밀리 초(Millisecond) 단위의 시간 값입니다.</param>
            <param name="unit">변환할 시간 단위입니다.</param>
            <returns></returns>
        </member>
        <member name="T:McQLib.Core.Util">
            <summary>
            McQLib에서 지원하는 유틸리티 클래스입니다.
            </summary>
        </member>
        <member name="F:McQLib.Core.Util.StartDirectory">
            <summary>
            소프트웨어의 시작 경로입니다.
            </summary>
        </member>
        <member name="M:McQLib.Core.Util.BytesToString(System.Byte[])">
            <summary>
            지정된 바이트 배열을 표현하는 문자열로 변환합니다.
            </summary>
            <param name="packet">변환할 바이트 배열입니다.</param>
            <returns>변환된 문자열입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.GetIndex(System.Byte,System.Byte)">
            <summary>
            지정된 ADDR과 CH로 채널의 인덱스를 계산하여 반환합니다.
            </summary>
            <param name="addr">보드 번호입니다.</param>
            <param name="ch">채널 번호입니다.</param>
            <returns>계산된 인덱스입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.GetADDR(System.Int32)">
            <summary>
            지정된 인덱스로 채널의 ADDR(보드 번호)를 계산하여 반환합니다.
            </summary>
            <param name="channelNo">채널의 인덱스입니다.</param>
            <returns>계산된 ADDR입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.GetCH(System.Int32)">
            <summary>
            지정된 인덱스로 채널의 CH(채널 번호)을 계산하여 반환합니다.
            </summary>
            <param name="channelNo">채널의 인덱스입니다.</param>
            <returns>계산된 CH입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.ConvertEnumToValue(System.Enum)">
            <summary>
            (Commands 내부 열거형 전용) Enum 형식으로 박싱된 값을 Declaring Enum 형식 값으로 변환합니다.
            </summary>
            <param name="cmd">변환할 Enum 형식 값입니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Core.Util.ToValue(System.Enum)">
            <summary>
            Enum 형식으로 박싱된 값을 Declaring 값 형식으로 변환합니다.
            </summary>
            <param name="e">변환할 Enum 값입니다.</param>
            <returns>변환된 값입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.ConvertCmdToEnum(System.UInt16)">
            <summary>
            (Commands 내부 열거형 전용) ushort 형식 값을 정확히 일치하는 Commands 내부 형식으로 변환합니다.
            </summary>
            <param name="cmd">변환할 ushort 형식 값입니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Core.Util.ConvertMsToString(System.UInt64)">
            <summary>
            ms(밀리 초, Milliseconds) 형태의 시간 값을 HH:mm:ss 포맷 문자열로 변환합니다.
            </summary>
            <param name="ms">변환할 ms 값입니다.</param>
            <returns>변환된 문자열입니다.</returns>
        </member>
        <member name="M:McQLib.Core.Util.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            지정된 개체에서 지정된 이름과 인수 목록이 일치하는 멤버 메서드를 찾아 호출합니다.
            <br>Public 또는 NonPublic의 멤버 메서드가 모두 검색 대상이며, 상속된 멤버는 검색 대상에서 제외됩니다.</br>
            </summary>
            <param name="obj">멤버 메서드를 소유하는 개체입니다.</param>
            <param name="methodName">호출할 메서드의 이름(대/소문자 구분)입니다.</param>
            <param name="parameters">호출할 메서드에 사용될 인수 리스트입니다.</param>
            <returns>메서드의 실행 결과(반환값)입니다. 반환형이 Void인 메서드의 경우에도 null입니다.</returns>
            <exception cref="T:System.Exception">지정된 조건으로 검색된 메서드가 존재하지 않습니다.</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">지정된 조건으로 검색된 메서드가 2개 이상입니다.</exception>
        </member>
        <member name="F:McQLib.GUI.Form_QueueMonitor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:McQLib.GUI.Form_QueueMonitor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:McQLib.GUI.Form_QueueMonitor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:McQLib.GUI.Form_PatternEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:McQLib.GUI.Form_PatternEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:McQLib.GUI.Form_PatternEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:McQLib.IO.QDataReader._read">
            <summary>
            _position 위치부터 시작해서 패킷을 하나 읽어옵니다.
            <br>패킷의 STX, ETX, LEN은 제거되며, 반환되는 배열은 TYPE과 DATA 필드로만 구성되어 있습니다.</br>
            </summary>
            <returns></returns>
        </member>
        <member name="M:McQLib.IO.QDataReader.Skip(System.Int32)">
            <summary>
            지정된 숫자만큼의 데이터를 스킵합니다.
            <br>이미 열었던 파일을 다시 열어 새로 갱신된 부분부터 가져오고 싶을 때 사용합니다.</br>
            </summary>
            <param name="count">스킵할 데이터의 개수입니다.</param>
        </member>
        <member name="M:McQLib.IO.QDataReader.Read">
            <summary>
            스트림으로부터 하나의 데이터를 읽어와 <see cref="T:McQLib.Core.MeasureData"/> 형식으로 변환하여 반환합니다.
            </summary>
            <returns>읽어온 데이터를 <see cref="T:McQLib.Core.MeasureData"/> 형식으로 변환한 값이거나, 스트림의 끝을 읽은 경우 null입니다.</returns>
        </member>
        <member name="M:McQLib.IO.QDataReader.toDataString_0_1(McQLib.Core.MeasureData)">
            <summary>
            MeasureData를 데이터의 레시피 타입마다 지정된 규칙에 따라 문자열로 변환합니다.
            <br>각 데이터는 콤마로 구분되어 있으며, 구분된 각 데이터들이 의미하는 값은 <see cref="M:McQLib.IO.QDataReader.getColumns_0_1(McQLib.Recipes.RecipeType,System.Boolean)"/>로 확인 가능합니다.</br>
            </summary>
            <param name="data">문자열로 변환할 <see cref="T:McQLib.Core.MeasureData"/> 형식 값입니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.IO.QDataWriter.Create(System.String,McQLib.Recipes.Sequence)">
            <summary>
            새로운 Q 측정 데이터 파일을 생성합니다.
            <br>기존에 생성된 파일이 이미 존재한다면 새로운 파일로 교체됩니다.</br>
            </summary>
            <param name="filename"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:McQLib.IO.QDataWriter.Write(McQLib.Core.MeasureData)">
            <summary>
            <see cref="T:McQLib.Core.MeasureData"/> 형식 데이터를 미리 정의된 형식의 바이트 배열로 변환하여 스트림에 쓰고, 실제로 쓰인 바이트 배열을 반환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:McQLib.NotUsed.Core.HelpAttribute">
            <summary>
            레시피 파라미터의 설명을 지정하는 특성입니다.
            </summary>
        </member>
        <member name="T:McQLib.NotUsed.Core.ParameterAttribute">
            <summary>
            레시피 파라미터의 정보를 지정하는 특성입니다.
            <br>파라미터가 UI상에 표시될 이름과 값 형식을 지정할 수 있습니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Core.ParameterAttribute.#ctor(System.String,McQLib.NotUsed.Core.ParameterValueType,System.String)">
            <summary>
            ParameterAttribute 특성의 새 인스턴스를 생성합니다.
            </summary>
            <param name="name">파라미터가 UI상에 표시될 이름입니다.</param>
            <param name="valueType">파라미터가 사용할 값 형식입니다. <see cref="P:McQLib.NotUsed.Core.ParameterAttribute.ParameterValueType"/>으로 지정합니다.</param>
            <param name="code">파라미터가 가지는 고유 번호입니다. 이 값은 시퀀스를 저장하거나 로드할 때 파라미터를 구분하기 위해 사용됩니다.
            <br>따라서 고유 번호는 다른 레시피에 속한 어떠한 번호와도 중복되지 않아야 하며, 일반적으로 아래 규칙에 따라 지정하십시오.</br>
            <br>(1) 고유 번호는 6자리 문자열입니다.</br>
            <br>(2) 고유 번호의 첫 번째, 두 번째 문자는 파라미터가 속한 클래스에 해당하는 <see cref="T:McQLib.NotUsed.Recipes.RecipeType"/>을 나타내는 두 자리 16진수 값입니다.</br>
            <br>(3) 고유 번호의 세 번째, 네 번째 문자는 해당 파라미터의 코드 상 순서를 나타내는 두 자리 16진수 값으로, 00~FF의 값입니다.</br>
            <br>(4) 고유 번호의 다섯 번째, 여섯 번째 문자는 해당 파라미터의 수정이 발생했을 때 증가시키는 두 자리 16진수 값으로, 00~FF의 값입니다. 새로운 파라미터가 추가되는 것이 아닌, 파라미터의 이름, 형식 등의 변화가 발생한 경우 이 값을 반드시 1씩 증가시키십시오.</br></param>
        </member>
        <member name="T:McQLib.NotUsed.Core.UnitAttribute">
            <summary>
            레시피 파라미터의 단위를 지정하는 특성입니다.
            </summary>
        </member>
        <member name="T:McQLib.NotUsed.Core.InvisibleAttribute">
            <summary>
            레시피 파라미터가 UI상에 표시되지 않도록 지정하는 특성입니다.
            <br>프로토콜의 필드 상에는 존재하나 항상 고정된 값을 사용하는 파라미터, 
            사용자가 편집할 수 없고 상황에 따라 자동으로 값이 결정되는 파라미터, 
            형식상 내부적으로 존재해야는 파라미터 등에 이 특성을 적용하십시오.</br>
            </summary>
        </member>
        <member name="T:McQLib.NotUsed.Recipes.End">
            <summary>
            End 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.End.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            <br>시퀀스의 마지막 스텝에 자동으로 추가되는 레시피로, 이 클래스의 인스턴스를 라이브러리 외부에서 직접 만들어서 사용할 수 없습니다.</br>
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo_NotUsed">사용되지 않음(stepNo와 같은 값으로 사용됩니다.)</param>
            <param name="errorStepNo_NotUsed">사용되지 않음(stepNo와 같은 값으로 사용됩니다.)</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.BaseRecipe.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            안전 조건에 대한 정보를 DATA Field 형태로 구성하여 반환합니다.
            <br>안전 조건 사용 여부 2Byte, 각 조건의 설정값 56Byte로 총 58Byte입니다.</br>
            </summary>
            <param name="stepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="endStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="errorStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <returns>안전 조건에 대한 DATA Field입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.BaseBasicRecipe.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            안전 조건, 종료 조건 및 기록 조건에 대한 정보를 DATA Field 형태로 구성하여 반환합니다.
            <br>안전 조건 58Byte, 종료 조건에 대한 사용 여부 2Byte, 각 종료 조건의 설정값 78Byte, 기록 조건에 대한 사용 여부 2Byte, 각 기록 조건의 설정값 24Byte로 총 164Byte입니다.</br>
            </summary>
            <param name="stepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="endStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="errorStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <returns>안전 조건, 종료 조건, 기록 조건에 대한 DATA Field입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Charge.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Rest.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.IRecipe.Name">
            <summary>
            레시피의 이름을 반환합니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.IRecipe.ToCommand(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeFactory.Recipes">
            <summary>
            기본적으로 제공되는 레시피 목록입니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeFactory.CreateInstance(McQLib.NotUsed.Recipes.RecipeType)">
            <summary>
            라이브러리 외부에서 생성 가능하도록 할 레시피는 레시피 타입과 함께 이곳에서 처리한다.
            </summary>
            <param name="recipeType"></param>
            <returns></returns>
        </member>
        <member name="T:McQLib.NotUsed.Recipes.RecipeInfo">
            <summary>
            레시피의 정보를 나타내는 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.RecipeType">
            <summary>
            레시피의 종류를 나타내는 <see cref="P:McQLib.NotUsed.Recipes.RecipeInfo.RecipeType"/>입니다.
            <br>만약 이 <see cref="T:McQLib.NotUsed.Recipes.RecipeInfo"/> 인스턴스가 서로 다른 종류의 레시피 여러 개에 대한 정보를 가지는 경우 <see cref="F:McQLib.NotUsed.Recipes.RecipeType.Multi"/>입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.GroupCount">
            <summary>
            레시피에 속하는 그룹의 개수입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Item(System.Int32)">
            <summary>
            레시피에 속한 그룹 중 <paramref name="index"/> 위치에 해당하는 그룹의 참조를 반환합니다.
            </summary>
            <param name="index">가져올 그룹의 위치입니다.</param>
            <returns><paramref name="index"/> 위치의 그룹입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeInfo.Find(System.String)">
            <summary>
            지정된 코드로 파라미터를 찾습니다.
            </summary>
            <param name="code">파라미터의 고유 번호입니다.</param>
            <returns>검색된 파라미터가 Group에 있는 경우 <see cref="!:Parameter"/>이고, 그렇지 않은 경우 <see langword="null"/>입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeInfo.#ctor(McQLib.NotUsed.Recipes.IRecipe[])">
            <summary>
             지정된 레시피 배열에서 공통된 <see cref="T:McQLib.NotUsed.Recipes.RecipeInfo.Group"/>과 <see cref="T:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter"/>의 정보를 가지는 새 RecipeInfo 인스턴스를 생성합니다.
            </summary>
            <param name="recipes">레시피 정보를 조회할 레시피 목록입니다.</param>
        </member>
        <member name="T:McQLib.NotUsed.Recipes.RecipeInfo.Group">
            <summary>
            레시피가 가지는 하나의 그룹에 대한 정보를 나타내는 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Name">
            <summary>
            그룹의 이름입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.ParameterCount">
            <summary>
            그룹에 속한 파라미터의 개수입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Item(System.Int32)">
            <summary>
            그룹에 속한 파라미터 중 <paramref name="index"/> 위치에 해당하는 파라미터의 참조를 반환합니다.
            </summary>
            <param name="index">가져올 파라미터의 위치입니다.</param>
            <returns><paramref name="index"/> 위치의 파라미터입니다.</returns>
        </member>
        <member name="T:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter">
            <summary>
            레시피가 가지는 하나의 파라미터에 대한 정보를 나타내는 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.Name">
            <summary>
            파라미터의 이름입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.ParameterValueType">
            <summary>
            파라미터가 가질 수 있는 값 형식을 나타내는 <see cref="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.ParameterValueType"/>입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.Code">
            <summary>
            파라미터의 고유 번호입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.Unit">
            <summary>
            파라미터의 단위입니다.
            <br>단위가 지정되지 않은 파라미터인 경우 <see langword="null"/>입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.Help">
            <summary>
            파라미터에 대한 도움말입니다.
            <br>도움말이 지정되지 않은 파라미터인 경우 <see langword="null"/>입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.FieldInfo">
            <summary>
            실제 파라미터에 해당하는 필드에 대한 <see cref="T:System.Reflection.FieldInfo"/> 인스턴스입니다.
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.IsAllowNull">
            <summary>
            이 파라미터가 Null 값을 허용하는지의 여부입니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.GetEnumValues">
            <summary>
            이 파라미터의 열거형 멤버 리스트를 반환합니다.
            </summary>
            <returns>이 파라미터의 <see cref="P:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.ParameterValueType"/>이 <see cref="F:McQLib.NotUsed.Core.ParameterValueType.Enum"/>인 경우 열거형 멤버들의 문자열 표현 배열이고, 열거형이 아닌 경우 null입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.GetValue(System.Object)">
            <summary>
            지정된 개체에서 이 파라미터에 해당하는 값을 가져옵니다.
            </summary>
            <param name="obj">값을 가져올 개체입니다.</param>
            <returns>가져온 값입니다.</returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.RecipeInfo.Group.Parameter.SetValue(System.Object,System.Object)">
            <summary>
            지정된 개체에서 이 파라미터에 해당하는 메모리의 값을 설정합니다.
            </summary>
            <param name="obj">값을 설정할 개체입니다.</param>
            <param name="value">설정할 값입니다.</param>
        </member>
        <member name="T:McQLib.NotUsed.Recipes.Sequence.EditingAction">
            <summary>
            Sequence의 변경이 발생했을 때 변경 내역을 기억하기 위한 클래스
            </summary>
        </member>
        <member name="F:McQLib.NotUsed.Recipes.Sequence.EditingAction.ActionType">
            <summary>
            변경 액션
            </summary>
        </member>
        <member name="F:McQLib.NotUsed.Recipes.Sequence.EditingAction.Object">
            <summary>
            변경에 참여된 주체
            </summary>
        </member>
        <member name="F:McQLib.NotUsed.Recipes.Sequence.EditingAction.Index">
            <summary>
            인덱스(필요에 따라)
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Sequence.EditingAction.#ctor(McQLib.NotUsed.Recipes.Sequence.ActionType,McQLib.NotUsed.Recipes.IRecipe)">
            <summary>
            액션과 주체를 사용하여 EditingAction 클래스의 새 인스턴스를 생성합니다.
            </summary>
            <param name="action">발생한 액션입니다.</param>
            <param name="obj">액션에 참여된 주체(Recipe)입니다.</param>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Sequence.EditingAction.#ctor(McQLib.NotUsed.Recipes.Sequence.ActionType,McQLib.NotUsed.Recipes.IRecipe,System.Int32)">
            <summary>
            액션, 주체 및 인덱스를 사용하여 EditingAction 클래스의 새 인스턴스를 생성합니다.
            </summary>
            <param name="action">발생한 액션입니다.</param>
            <param name="obj">액션에 참여된 주체(Recipe)입니다.</param>
            <param name="index">액션에 사용된 인덱스입니다.</param>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.Sequence.CreateDateTime">
            <summary>
            시퀀스가 생성된 날짜 및 시간입니다.
            <br>시퀀스가 신규 파일로 생성 및 저장되는 시점의 시간이 저장됩니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.Sequence.LastModifiedDateTime">
            <summary>
            시퀀스가 마지막으로 수정된 날짜 및 시간입니다.
            <br>시퀀스가 파일로 저장되는 시점의 시간이 저장됩니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.Sequence.Name">
            <summary>
            시퀀스의 이름입니다.
            <br>시퀀스가 실제로 저장되는 경로와 파일명은 "Application.StartupPath\Sequence\Name.seq"입니다. </br>
            </summary>
        </member>
        <member name="P:McQLib.NotUsed.Recipes.Sequence.IsChanged">
            <summary>
            시퀀스가 수정되었는지의 여부입니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Sequence.#ctor">
            <summary>
            비어있는 상태의 시퀀스 인스턴스를 생성합니다.
            </summary>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Sequence.FromFile(System.String)">
            <summary>
            지정된 경로의 시퀀스 파일로부터 시퀀스 정보를 읽어와 시퀀스의 인스턴스를 생성합니다.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:McQLib.NotUsed.Recipes.Sequence.ToPacketArray(System.Byte,System.Byte)">
            <summary>
            현재 시퀀스를 장비로 송신하기 위한 패킷 배열을 생성하여 반환합니다.
            <br>현재 메서드를 통해 반환되는 패킷 배열을 순서대로 장비에 모두 송신하십시오.</br>
            </summary>
            <param name="addr">현재 시퀀스를 수신할 채널이 위치하는 보드의 번호입니다.</param>
            <param name="ch">현재 시퀀스를 수신할 채널의 번호입니다.</param>
            <returns>생성된 패킷 배열입니다.</returns>
        </member>
        <member name="T:McQLib.VersionInfo">
            <summary>
            McQLib에서 사용되는 버전 정보를 정의하는 구조체입니다.
            </summary>
        </member>
        <member name="F:McQLib.VersionInfo.Major">
            <summary>
            Major 버전을 나타냅니다.
            <br>Major 버전은 하위 버전과 더이상 호환되지 않는 변화가 발생했을 때만 증가시킵니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.VersionInfo.Minor">
            <summary>
            Minor 버전을 나타냅니다.
            <br>Minor 버전은 기존 기능이 변경되거나, 새로운 기능이 추가될 때 증가시킵니다.</br>
            <br>Minor 버전이 증가해도 하위 버전과 호환이 가능해야 합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.VersionInfo.Patch">
            <summary>
            Patch 버전을 나타냅니다.
            <br>Patch 버전은 버그가 수정되었을 때 증가시킵니다.</br>
            <br>Patch 버전이 증가해도 하위 버전과 호환이 가능해야 합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.VersionInfo.Additional">
            <summary>
            Patch 버전의 뒤에 추가로 붙는 문자 또는 문자열입니다.
            <br>일반적으로 1.0.3b 와 같은 형식의 버전 정보를 나타낼 때 사용합니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.VersionInfo.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="patch"></param>
            <param name="additional"></param>
        </member>
        <member name="M:McQLib.VersionInfo.ToString">
            <summary>
            VersionInfo 정보를 Major.Minor.Patch + Additional 형식의 문자열로 변환합니다.
            <br>Patch가 0인 경우 Patch와 Additional은 문자열에 포함되지 않습니다.</br>
            </summary>
            <returns>변환된 문자열입니다.</returns>
        </member>
        <member name="M:McQLib.VersionInfo.CompatibleWith(McQLib.VersionInfo)">
            <summary>
            지정된 VersionInfo의 버전이 호환 가능한 버전인지의 여부를 확인합니다.
            </summary>
            <param name="version">비교할 버전입니다.</param>
            <returns>두 버전이 호환 가능한 경우(Major 버전이 동일한 경우) true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
        <member name="T:McQLib.Device.ChannelCommand">
            <summary>
            각 채널에 수행 대기중인 명령을 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Idle">
            <summary>
            아무 동작도 예약되지 않음
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Start">
            <summary>
            시퀀스 송신 및 채널 시작 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Ready">
            <summary>
            시작 명령 예약 - 직접 지정 X
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Stop">
            <summary>
            정지 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Pause">
            <summary>
            일시정지 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Skip">
            <summary>
            스킵 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Restart">
            <summary>
            재시작 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.SafetyRestart">
            <summary>
            안전 조건 재시작 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.ErrorClear">
            <summary>
            에러 클리어 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.StopAppending">
            <summary>
            이어붙이기 취소 명령 예약
            </summary>
        </member>
        <member name="F:McQLib.Device.ChannelCommand.Cancel">
            <summary>
            예약된 명령 취소
            </summary>
        </member>
        <member name="T:McQLib.Device.State">
            <summary>
            각 채널의 현재 상태를 나타내는 열거형입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.IDLE">
            <summary>
            채널이 아무것도 하지 않는 대기 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.APPENDING">
            <summary>
            사용되지 않음.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.SENDING">
            <summary>
            시퀀스 송신중 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.READY">
            <summary>
            시퀀스 송신을 끝낸 후 준비상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.RUN">
            <summary>
            측정이 진행중 또는 이어붙이기 진행중인 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.PAUSED">
            <summary>
            측정이 일시정지된 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.SAFETY">
            <summary>
            측정이 안전 조건에 의해 일시정지된 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.ERROR">
            <summary>
            채널에 오류가 발생한 상태입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.State.DISCONNECTED">
            <summary>
            채널이 연결되지 않은 상태입니다.
            </summary>
        </member>
        <member name="T:McQLib.Device.Channel">
            <summary>
            하나의 채널에 대한 데이터를 처리하기 위한 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.VoltageUnit">
            <summary>
            채널이 전압 값을 표기하기 위한 단위 정보입니다. 모든 채널에 대해 적용됩니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.CurrentUnit">
            <summary>
            채널이 전류 값을 표기하기 위한 단위 정보입니다. 모든 채널에 대해 적용됩니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Logging">
            <summary>
            채널에서 레시피가 다음 단계로 넘어갈 때마다 레시피가 종료된 원인을 기록하기 위한 옵션입니다. 현재 지원하지 않는 기능입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.IsClearSequenceWhenEnd">
            <summary>
            채널의 측정이 종료되었을 때 채널이 가진 시퀀스 정보를 초기화할지의 여부입니다. 모든 채널에 대해 적용됩니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.ExportFilePath">
            <summary>
            텍스트 내보내기 확장 기능의 파일 출력 경로입니다.
            <br>기능을 사용하지 않는 경우 string.Empty입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.IsAppending">
            <summary>
            현재 채널이 이어붙이기를 진행중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.SaveFileName">
            <summary>
            현재 채널의 측정데이터가 저장될 파일의 이름입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Sequence">
            <summary>
            현재 채널에 적용되어있는 시퀀스입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Channel.Owner">
            <summary>
            현재 채널을 소유하는 마스터 Communicator입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.GlobalIndex">
            <summary>
            연결된 모든 Q 장비에 대해서 현재 채널이 가지는 순번입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Address">
            <summary>
            현재 채널의 주소입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Channel.LocalIndex">
            <summary>
            현재 채널이 속한 컴포넌트에서 현재 채널이 가지는 순번입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.ADDR">
            <summary>
            채널이 속한 보드의 번호입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.CH">
            <summary>
            채널이 속한 보드 상에서의 현재 채널의 번호입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.IsReceiveRun">
            <summary>
            채널의 수신 스레드가 동작하고 있는지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.State">
            <summary>
            채널의 상태입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.TotalTime">
            <summary>
            채널의 측정 경과 시간입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Voltage">
            <summary>
            전압(V)입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Current">
            <summary>
            전류(A)입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Temperature">
            <summary>
            온도(℃)입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.RecipeName">
            <summary>
            현재 측정중인 레시피 이름입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.StepNo">
            <summary>
            현재 레시피의 시퀀스상 번호입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.StepCount">
            <summary>
            총 스텝이 진행된 횟수입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.TotalSteps">
            <summary>
            현재 시퀀스의 전체 스텝 수 입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Message">
            <summary>
            현재 채널의 상태 메시지입니다.
            <br>채널이 정상 상태일 경우에는 <see cref="F:System.String.Empty"/>입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.SaveDirectory">
            <summary>
            측정 데이터가 저장될 경로입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Channel.Name">
            <summary>
            실험의 이름입니다. 측정 데이터 파일의 이름으로 사용됩니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.#ctor(McQLib.Device.Communicator,System.Int32,System.Byte,System.Byte,McQLib.Device.State)">
            <summary>
            새로운 채널 인스턴스를 생성합니다.
            </summary>
            <param name="ownerCommunicator">채널을 소유하는 마스터 Communicator입니다.</param>
            <param name="localIndex">채널의 지역 인덱스입니다.</param>
            <param name="boardNo">채널이 속한 보드의 번호입니다.</param>
            <param name="channelNo">채널이 속한 보드 상에서의 채널 번호입니다.</param>
            <param name="state">채널의 상태입니다.</param>
        </member>
        <member name="F:McQLib.Device.Channel.Lock">
            <summary>
            채널을 정지한 후 데이터가 이어서 들어오는 현상을 방지하기 위해 채널을 잠글 수 있다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Channel.ChannelCommand">
            <summary>
            이 필드는 각 채널에 동작을 명령하기 위한 변수입니다.
            <br>각 채널에는 최대 1개의 명령만이 대기할 수 있으며, 기존에 주어진 명령이 수행되어 명령 대기 상태가 <see cref="F:McQLib.Device.ChannelCommand.Idle"/>로 변경되기 전에 다른 명령을 할당하여 대기중인 명령을 덮어쓸 수 있습니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.SetAddrToZero">
            <summary>
            채널의 ADDR을 0으로 변경합니다.
            <br>이 옵션은 장비의 사양이 1보드-1채널인 경우에 필요합니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.ToChannelInfo">
            <summary>
            채널이 가진 정보를 <see cref="T:McQLib.Device.ChannelInfo"/>의 인스턴스화 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McQLib.Device.Channel.ApplyChannelInfo(McQLib.Device.ChannelInfo)">
            <summary>
            <see cref="T:McQLib.Device.ChannelInfo"/> 인스턴스가 가진 정보를 현재 채널에 적용합니다.
            </summary>
            <param name="channelInfo">채널 정보를 가지는 <see cref="T:McQLib.Device.ChannelInfo"/> 인스턴스입니다.</param>
        </member>
        <member name="M:McQLib.Device.Channel.Init">
            <summary>
            채널의 측정 상태와 측정 정보를 초기화합니다. 이 메서드는 측정이 종료된 후에 호출되어야 합니다.
            <br>초기화 되는 내용 : Message, SaveFileName, ExportFilePath</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.Ready">
            <summary>
            채널을 측정 준비 상태로 만듭니다. 이 메서드는 측정이 시작되기 전에 호출되어야 합니다.
            <br>초기화되는 내용 : StepNo, TotalTime, Voltage, Current, Temperature, StepCount, RecipeName</br>
            <br>준비되는 내용 : Writer, SaveFileName</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.Start">
            <summary>
            채널의 패킷 처리 스레드를 시작합니다.
            <br><br>이 메서드는 측정을 시작하는 메서드가 아니며, <see cref="T:McQLib.Device.Communicator"/>의 관리 아래 호출되어야 합니다. 외부에서 임의로 호출하지 마십시오.</br></br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.Stop">
            <summary>
            채널의 패킷 처리 스레드를 종료합니다.
            <br><br>이 메서드는 측정을 중단하는 메서드가 아니며, <see cref="T:McQLib.Device.Communicator"/>의 관리 아래 호출되어야 합니다. 외부에서 임의로 호출하지 마십시오.</br></br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.SetMessage(System.String)">
            <summary>
            채널의 상태 메시지를 설정합니다.
            </summary>
            <param name="message">상태 메시지로 지정할 문자열입니다.</param>
        </member>
        <member name="M:McQLib.Device.Channel.Push(McQLib.Device.SubPacket)">
            <summary>
            현재 채널로 수신된 패킷을 패킷 처리 큐의 후행에 삽입합니다.
            </summary>
            <param name="subPacket">현재 채널이 처리해야할 패킷입니다.</param>
        </member>
        <member name="M:McQLib.Device.Channel.channelLoop">
            <summary>
            Receive Queue에 들어온 SubPacket을 처리하는 스레드
            </summary>
        </member>
        <member name="M:McQLib.Device.Channel.updateData(McQLib.Core.MeasureData)">
            <summary>
            채널 정보를 채널 시퀀스 데이터의 가장 마지막 데이터로 갱신
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:McQLib.Device.Channel.writeData(McQLib.Core.ChannelData)">
            <summary>
            채널 시퀀스 데이터 내용 전체를 파일에 쓰기
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:McQLib.Device.Channel.processData(McQLib.Core.ChannelData)">
            <summary>
            데이터 처리 (update와 writeData)
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:McQLib.Device.Commands">
            <summary>
            통합 프로토콜 명령 분류를 구성하는 열거형입니다.
            <br>세부 명령의 이름 앞에 M_이 붙은 것은 Master Board 전용, S_가 붙은 것은 Slave Board 전용 명령어임.</br>
            <br>세부 명령의 이름 뒤에 _G가 붙은 것은 조회 전용 명령, _S가 붙은 것은 설정 전용 명령, _GS가 붙은 것은 조회 및 설정 가능 명령,</br>
            <br>세부 명령의 이름 뒤에 _R이 붙은 것은 수신 전용 명령임.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.CommonCommands">
            <summary>
            공통 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x00입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.CommonCommands.Ping_G">
            <summary>
            보드와 기본 통신 상태를 확인하는 명령입니다.
            <br>정상 동작 상태일 경우 응답 코드, 그렇지 않은 경우 오류 코드로 응답합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.CommonCommands.ResetBoard_S">
            <summary>
            보드를 소프트웨어적으로 리셋시키는 명령입니다.
            <br>장비에서는 이 명령에 대한 응답을 보낸 후 리셋 동작에 들어갑니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.CommonCommands.BoardInformation_G">
            <summary>
            보드의 기본 정보를 조회하는 명령입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.CommonCommands.InitStateResister_GS">
            <summary>
            에러 상태나 이벤트를 조회하거나, '0' 값으로 초기화하도록 하는 명령입니다.
            <br>에러가 한 번이라도 발생했다면 값을 초기화하기 전까지 그 값을 유지하고 있습니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.CommonCommands.SaveRegister_S">
            <summary>
            저장 항목들을 메모리에 저장하도록 하는 명령입니다.
            <br>장비에서는 이 명령에 대한 응답을 보낸 후 저장 동작에 들어갑니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.MultiChannelCommands">
            <summary>
            다채널 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x0B입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.MultiChannelCommands.M_BoardSearching_GS">
            <summary>
            Slave 보드가 장착되었는지 재탐색할 수 있도록 설정합니다.
            <br>Slave 보드의 개수에 따라 Slave Address부터 채널 상태까지 반복됩니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.MultiChannelCommands.M_SlaveBoardInformation_G">
            <summary>
            Slave 보드가 장착되어 있다면 Slave 보드의 기본 정보를 조회합니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.MultiChannelCommands.S_SlaveBoardTransmissionControl_GS">
            <summary>
            Slave 모듈이 데이터를 송신할 수 있도록 제어권을 설정 및 해제합니다.
            <br>멀티 채널일 경우 일정한 시간 간격으로 다른 채널로 제어권을 넘겨줘야 합니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.BatteryCycler_SetGetCommands">
            <summary>
            Battery Cycler 설정/조회 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x10입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.BatteryCycler_SetGetCommands.StartStopSequence">
            <summary>
            시퀀스를 시작 또는 진행중인 시퀀스를 정지(종료)합니다.
            <br>정지되기 전까지 정지 조건을 변경할 수 있으며 시퀀스가 일시 정지 상태라면 재시작합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Commands.BatteryCycler_SetGetCommands.PauseSequence">
            <summary>
            진행중인 시퀀스를 일시 정지합니다.
            <br>정지되기 전까지 정지 조건을 변경할 수 있습니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.BatteryCycler_GetMeasureCommands">
            <summary>
            Battery Cycler 조회/측정 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x11입니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.Q3000Q2000_SlotCommands">
            <summary>
            Q3000/Q2000 Slot 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x14입니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.ProductionCommonCommands">
            <summary>
            생산 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0x80입니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Commands.CalibrationCommands">
            <summary>
            측정 보상값 명령을 구성하는 열거형입니다.
            <br>명령 분류 코드는 0xF0입니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.Communicator">
            <summary>
            장비와 통신이 필요한 모든 기능을 총괄하는 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.TotalChannels">
            <summary>
            생성된 모든 Communicator에 연결된 채널의 리스트입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.Appending">
            <summary>
            이어붙이기 기능을 사용할지의 여부입니다.
            <br>모든 Communicator에 일괄 적용됩니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.SaveChannelInfos(System.Int32)">
            <summary>
            지정된 인덱스 채널의 정보를 <see cref="P:System.Windows.Forms.Application.StartupPath"/>\Channels\Ch<paramref name="channelGlobalIndex"/>.config 파일에 저장합니다.
            </summary>
            <param name="channelGlobalIndex">정보를 저장할 채널의 인덱스입니다. -1로 지정한 경우 생성된 모든 채널의 정보를 저장합니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.LoadChannelInfos(System.Int32)">
            <summary>
            지정된 인덱스 채널에 대해 <see cref="P:System.Windows.Forms.Application.StartupPath"/>\Channels\Ch<paramref name="channelGlobalIndex"/>.config 파일로부터 불러옵니다.
            <br>채널 인덱스를 -1로 지정한 경우 생성된 모든 채널의 정보를 불러옵니다.</br>
            </summary>
            <param name="channelGlobalIndex"></param>
        </member>
        <member name="M:McQLib.Device.Communicator.#ctor(System.Int32,System.Int32)">
            <summary>
            하나의 Q 장비에 대한 통신을 처리하는 Communicator 개체를 생성합니다.
            </summary>
            <param name="index">장비의 번호입니다. 0부터 시작합니다.</param>
            <param name="maxChannelCount">장비의 최대 채널 수 입니다.</param>
        </member>
        <member name="T:McQLib.Device.Communicator.LogHandler">
            <summary>
            Communicator에서의 로그 기록용 델리게이트입니다.
            </summary>
            <param name="msg">기록할 메시지를 나타내는 문자열입니다.</param>
        </member>
        <member name="T:McQLib.Device.Communicator.PacketIntercpetHandler">
            <summary>
            Communicator에 수신된 패킷을 McQLib 외부에서 대신 처리하기 위한 델리게이트입니다.
            </summary>
            <param name="packet">수신된 패킷입니다.</param>
        </member>
        <member name="F:McQLib.Device.Communicator.ActionLog">
            <summary>
            로그 출력을 위한 이벤트 핸들러입니다.
            <br>Communicator는 동작이 발생될 때마다 ActionLog에 등록된 메서드에 로그 메시지를 인자로 전달합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.PacketLog">
            <summary>
            로그 출력을 위한 이벤트 핸들러입니다. Communicator는 패킷이 수신될 때마다 PacketLog에 등록된 메서드에 패킷의 Raw 바이트를 표현하는 문자열을 인자로 전달합니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.Intercept">
            <summary>
            SendAndReceive로 송신되지 않은 모든 패킷의 처리를 가로채기 위한 핸들러입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.ShowPacketLog">
            <summary>
            로그에 패킷 정보를 출력할지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.WithRawPacket">
            <summary>
            CommunicationLog에 전달되는 로그 메시지에 Raw Packet의 내용을 포함할지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.Logging">
            <summary>
            로그를 기록할지의 여부입니다.
            </summary>
        </member>
        <member name="T:McQLib.Device.Communicator.ReceiveWaiter">
            <summary>
            송신 패킷에 대한 응답 패킷이 왔는지를 검사하기 위한 구조를 가지는 클래스입니다.
            <br>수신 패킷의 ADDR, CH, CMD1, CMD2를 검사하여 이 클래스 인스턴스의 정보와 일치하는 경우 응답 패킷으로 간주하고 <see cref="F:McQLib.Device.Communicator.ReceiveWaiter.Received"/>에 해당 패킷을 할당합니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.ReceiveWaiter.ADDR">
            <summary>
            이 ReceiveWaiter가 기다리는 ADDR입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.ReceiveWaiter.CH">
            <summary>
            이 ReceiveWaiter가 기다리는 CH입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.ReceiveWaiter.CMD1">
            <summary>
            이 ReceiveWaiter가 기다리는 CMD1입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.ReceiveWaiter.CMD2">
            <summary>
            이 ReceiveWaiter가 기다리는 CMD2입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.ReceiveWaiter.Send">
            <summary>
            보낸 패킷입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.ReceiveWaiter.Received">
            <summary>
            응답 패킷입니다.
            <br>아직 응답이 오지 않은 경우 <see langword="null"/>입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.ReceiveWaiter.SendTime">
            <summary>
            이 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 기다리는 응답 패킷에 대한 송신 패킷이 SendQueue에 Enqueue된 시간입니다.
            <br><see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 <see cref="M:McQLib.Device.Communicator.SendAndReceive(McQLib.Device.Packet,System.Int32,System.Int32)"/>에서 등록된 경우 <see langword="null"/>입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.ReceiveWaiter.TimeOut">
            <summary>
            이 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 응답 패킷을 기다릴 시간(초)입니다.
            <br><see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 <see cref="M:McQLib.Device.Communicator.SendAndReceive(McQLib.Device.Packet,System.Int32,System.Int32)"/>에서 등록된 경우 <see langword="null"/>입니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.ReceiveWaiter.#ctor(McQLib.Device.Packet)">
            <summary>
            <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>의 새 인스턴스를 초기화합니다.
            <br>이렇게 생성된 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/> 인스턴스는 <see cref="M:McQLib.Device.Communicator.SendAndReceive(McQLib.Device.Packet,System.Int32,System.Int32)"/>에서 추가 및 제거됩니다.</br>
            </summary>
            <param name="packet"><see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 기다릴 응답 패킷에 대한 송신 패킷입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.ReceiveWaiter.#ctor(McQLib.Device.Packet,System.DateTime,System.Int32)">
            <summary>
            <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>의 새 인스턴스를 초기화합니다.
            <br>이렇게 생성된 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/> 인스턴스는 <see cref="!:Send(Packet)"/>에서 추가되고, CheckLoop 스레드에서 제거됩니다.</br>
            </summary>
            <param name="send"><see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 기다릴 응답 패킷에 대한 송신 패킷입니다.</param>
            <param name="sendTime"><paramref name="packet"/>이 SendQueue에 Enqueue된 시간입니다.</param>
            <param name="timeOut"><see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>가 기다릴 시간입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.ReceiveWaiter.CompareTo(McQLib.Device.Packet)">
            <summary>
            지정된 패킷이 이 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/> 인스턴스가 기다리는 응답 패킷인지 검사합니다.
            </summary>
            <param name="packet">응답 패킷인지 비교할 패킷입니다.</param>
            <returns><paramref name="packet"/>의 ADDR, CH, CMD1, CMD2가 이 <see cref="T:McQLib.Device.Communicator.ReceiveWaiter"/>의 ADDR, CH, CMD1, CMD2와 모두 일치하는 경우 <see langword="true"/>이고,
            그렇지 않은 경우 <see langword="false"/>입니다.</returns>
        </member>
        <member name="F:McQLib.Device.Communicator._sendQueue">
            <summary>
            보낼 패킷이 저장되는 큐
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator._byteList">
            <summary>
            수신된 바이트가 쌓이는 리스트
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator._rawPacketQueue">
            <summary>
            바이트가 STX2, ETX2 단위로 끊어져서 들어오는 큐
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator._receiveWaiterList">
            <summary>
            송신 후 응답을 기다리는 패킷 리스트
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator._garbageList">
            <summary>
            바이트 리스트에 남은 쓰레기값을 저장하는 리스트
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.Index">
            <summary>
            장비의 인덱스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsConnected">
            <summary>
            장비가 연결되었는지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IP">
            <summary>
            IP 주소를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.Port">
            <summary>
            포트 번호를 가져옵니다.
            <br>Communicator는 포트 번호를 자동으로 할당 받아 연결합니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.PingInterval">
            <summary>
            일정 간격마다 Ping을 주고 받기 위한 시간 간격(초)입니다.
            <br>기본값은 20초 입니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.Communicator.Timeout">
            <summary>
            연결 작업에서 소켓 연결 요청을 보내고 기다릴 시간(초)입니다.
            <br>기본값은 3초 입니다.</br>
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsAutoPing">
            <summary>
            일정 간격마다 Ping을 주고 받을지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsOldDevice">
            <summary>
            연결된 장비가 구 장비(보드 당 단일 채널)인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.Item(System.Int32)">
            <summary>
            장비에 포함된 채널 목록에서 index 위치의 <see cref="T:McQLib.Device.Channel"/> 개체를 가져옵니다.
            </summary>
            <param name="index">가져올 채널의 번호입니다.</param>
            <returns>지정된 index의 채널입니다.</returns>
        </member>
        <member name="P:McQLib.Device.Communicator.Channels">
            <summary>
            현재 Communicator에 속한 채널의 배열입니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.Connect">
            <summary>
            장비에 연결을 시도합니다.
            <br>이미 장비와 연결된 상태인 경우, 연결을 해제한 후 다시 연결합니다.</br>
            </summary>
            <returns>연결에 성공한 경우 true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.connect">
            <summary>
            새로운 포트 번호를 할당 받아 소켓으로 연결을 시도합니다.
            </summary>
            <returns>연결에 성공한 경우 true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.connectWithTimeout(System.Net.Sockets.Socket,System.String,System.Int32,System.Int32)">
            <summary>
            소켓에 연결을 시도합니다.
            <br>지정된 시간 내에 연결이 성공하지 못한 경우 즉시 연결 시도를 중단하고 처리를 반환합니다.</br>
            </summary>
            <param name="socket">연결 시도할 소켓입니다.</param>
            <param name="ip">연결할 IP입니다.</param>
            <param name="port">연결할 Port입니다.</param>
            <param name="timeOutSec">연결 시도 후 대기할 시간(초)입니다.</param>
            <returns>연결에 성공한 경우 true이고, 연결에 실패하거나 시간이 초과한 경우 false입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.Disconnect">
            <summary>
            장비와의 연결을 끊습니다.
            <br>모든 통신 스레드가 종료되며, 송신 대기중인 패킷이 남아있는 경우 버려집니다.</br>
            </summary>
            <returns>연결 종료에 성공한 경우 true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
        <member name="P:McQLib.Device.Communicator.SdFail">
            <summary>
            현재 장비에서 SD카드 오류가 발생했는지의 여부입니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.InitializeCommunicator">
            <summary>
            장비로부터 보드 정보, 채널 정보 등을 받아와 <see cref="T:McQLib.Device.Communicator"/> 개체를 구성하고, 동작을 준비합니다.
            </summary>
            <exception cref="F:McQLib.Core.QExceptionType.COMMUNICATION_CANNOT_READ_BOARDINFO_ERROR">장비로부터 보드 정보를 읽어오지 못했습니다.</exception>
            <exception cref="F:McQLib.Core.QExceptionType.PACKET_BOARD_INFORMATION_DATAFIELD_LENGTH_ERROR">보드 정보 패킷이 올바르지 않습니다.</exception>
            <exception cref="F:McQLib.Core.QExceptionType.ACTION_DEVICE_NOT_RESPONSE_ERROR">장비가 응답하지 않습니다.</exception>
            <exception cref="F:McQLib.Core.QExceptionType.COMMUNICATION_COMMANDING_FAILED_ERROR">장비가 명령을 정상적으로 수행하지 못했습니다.</exception>
        </member>
        <member name="M:McQLib.Device.Communicator.CheckAppendingData">
            <summary>
            장비로 송신 제어권 설정 명령을 송신하고, 저장된 데이터가 있다면 송신하도록 합니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.SendSequence(McQLib.Core.Address,McQLib.Recipes.Sequence)">
            <summary>
            채널에 시퀀스를 전송합니다.
            <br>이 명령은 채널 전용 명령으로 마스터보드로 보낼 수 없습니다.</br>
            </summary>
            <param name="address">시퀀스를 전송할 채널의 번호입니다. 0부터 시작합니다.</param>
            <param name="seq">전송할 시퀀스입니다.</param>
            <returns><see cref="F:McQLib.Core.Result.NoError"/> : 전송 성공
            <br><see cref="F:McQLib.Core.Result.NoResponse"/> : 응답 없음</br>
            <br><see cref="F:McQLib.Core.Result.InvalidSequence"/> : 송신할 수 없는 시퀀스</br>
            <br><see cref="F:McQLib.Core.Result.TryCount"/> : 송신 재시도 횟수 초과</br>
            <br><see cref="F:McQLib.Core.Result.RegClearFail"/> : 레지스터 초기화 실패</br>
            <br><see cref="F:McQLib.Core.Result.Com_ActionError"/> ~ <see cref="F:McQLib.Core.Result.Com_NotDefinedError"/> : ERR 필드가 0이 아닌 경우</br></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.StartChannel(McQLib.Core.Address,McQLib.Core.ApplyWhen)">
            <summary>
            지정된 채널의 측정을 시작합니다.
            <br>채널이 일시정지 상태인 경우 처음부터 재시작합니다.</br>
            <br>이 명령은 채널 전용 명령으로 마스터보드로 보낼 수 없습니다.</br>
            </summary>
            <param name="address">측정을 시작할 채널의 번호입니다. <see cref="T:McQLib.Core.Address"/> 구조체를 사용합니다.</param>
            <param name="applyWhen">명령한 동작을 수행할 시점을 나타내는 <see cref="T:McQLib.Core.ApplyWhen"/>입니다. 기본값은 <seealso cref="F:McQLib.Core.ApplyWhen.Immediately"/>입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.StopChannel(McQLib.Core.Address,McQLib.Core.ApplyWhen)">
            <summary>
            지정된 채널의 측정을 중단합니다.
            </summary>
            <param name="address">측정을 중단할 채널의 번호입니다. 0부터 시작합니다.</param>
            <param name="applyWhen">명령한 동작을 수행할 시점을 나타내는 <see cref="T:McQLib.Core.ApplyWhen"/>입니다. 기본값은 <seealso cref="F:McQLib.Core.ApplyWhen.Immediately"/>입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.PauseChannel(McQLib.Core.Address,McQLib.Core.ApplyWhen)">
            <summary>
            지정된 채널의 측정을 일시정지합니다.
            <br>일시정지된 채널을 이어서 진행할 때는 <see cref="M:McQLib.Device.Communicator.RestartChannel(McQLib.Core.Address,McQLib.Core.ApplyWhen)"/>을 사용하십시오.</br>
            </summary>
            <param name="address">측정을 일시정지할 채널의 번호입니다. 0부터 시작합니다.</param>
            <param name="applyWhen">명령한 동작을 수행할 시점을 나타내는 <see cref="T:McQLib.Core.ApplyWhen"/>입니다. 기본값은 <seealso cref="F:McQLib.Core.ApplyWhen.Immediately"/>입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.RestartChannel(McQLib.Core.Address,McQLib.Core.ApplyWhen)">
            <summary>
            일시정지된 채널의 측정을 다시 시작합니다.
            </summary>
            <param name="address">다시 시작할 채널의 번호입니다. 0부터 시작합니다.</param>
            <param name="applyWhen">명령한 동작을 수행할 시점을 나타내는 <see cref="T:McQLib.Core.ApplyWhen"/>입니다. 기본값은 <seealso cref="F:McQLib.Core.ApplyWhen.Immediately"/>입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.SkipChannel(McQLib.Core.Address)">
            <summary>
            지정된 채널이 현재 수행하고 있는 스텝을 강제 종료하고 다음 스텝을 진행하도록 합니다.
            </summary>
            <param name="address">강제 진행할 채널의 번호입니다. 0부터 시작합니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.SetTime(McQLib.Core.Address)">
            <summary>
            지정된 채널의 RTC를 현재 시각으로 설정합니다.
            </summary>
            <param name="channelNo"></param>
        </member>
        <member name="M:McQLib.Device.Communicator.GetTime(McQLib.Core.Address)">
            <summary>
            지정된 채널의 RTC로부터 저장된 시간을 가져옵니다.
            </summary>
            <param name="channelNo"></param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.InitSafetyAlarm(McQLib.Core.Address)">
            <summary>
            지정된 채널의 상태 레지스터를 초기화합니다.
            <br>이 명령은 슬레이브 보드로 송신하는 경우 ByPass로 송신됩니다.</br>
            </summary>
            <param name="address">상태 레지스터를 초기화할 채널의 주소입니다.</param>
            <returns><see cref="F:McQLib.Core.Result.NoError"/> : 전송 성공
            <br><see cref="F:McQLib.Core.Result.NoResponse"/> : 응답 없음</br>
            <br><see cref="F:McQLib.Core.Result.Com_ActionError"/> ~ <see cref="F:McQLib.Core.Result.Com_NotDefinedError"/> : ERR 필드가 0이 아닌 경우</br></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.GetRegister0(System.Byte,System.Byte)">
            <summary>
            지정된 채널의 상태 레지스터를 읽어옵니다.
            <br>이 명령은 슬레이브 보드로 송신하는 경우 ByPass로 송신됩니다.</br>
            </summary>
            <param name="address">상태 레지스터를 읽어올 채널의 번호입니다. 0부터 시작합니다.</param>
            <returns>읽어온 상태 레지스터 정보입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.GetRegister1(System.Byte,System.Byte)">
            <summary>
            지정된 채널의 상태 레지스터를 읽어옵니다.
            <br>이 명령은 슬레이브 보드로 송신하는 경우 ByPass로 송신됩니다.</br>
            </summary>
            <param name="address">상태 레지스터를 읽어올 채널의 번호입니다. 0부터 시작합니다.</param>
            <returns>읽어온 상태 레지스터 정보입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.InitSdCardError">
            <summary>
            마스터 보드 상태 레지스터의 SD카드 오류 플래그를 초기화합니다.
            <br>이 명령은 SD카드의 마운트를 해제한 뒤 다시 마운트하는 동작을 수행합니다.</br>
            </summary>
            /// <returns><see cref="F:McQLib.Core.Result.NoError"/> : 전송 성공
            <br><see cref="F:McQLib.Core.Result.NoResponse"/> : 응답 없음</br>
            <br><see cref="F:McQLib.Core.Result.Com_ActionError"/> ~ <see cref="F:McQLib.Core.Result.Com_NotDefinedError"/> : ERR 필드가 0이 아닌 경우</br></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.InitRecipeFailError">
            <summary>
            마스터 보드 상태 레지스터의 Recipe Sending Fail 오류 플래그를 초기화합니다.
            </summary>
            /// <returns><see cref="F:McQLib.Core.Result.NoError"/> : 전송 성공
            <br><see cref="F:McQLib.Core.Result.NoResponse"/> : 응답 없음</br>
            <br><see cref="F:McQLib.Core.Result.Com_ActionError"/> ~ <see cref="F:McQLib.Core.Result.Com_NotDefinedError"/> : ERR 필드가 0이 아닌 경우</br></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.InitRegister">
            <summary>
            마스터 보드 상태 레지스터에서 SD RW fail 플래그를 제외한 모든 오류 플래그를 초기화합니다.
            </summary>
            <returns><see cref="F:McQLib.Core.Result.NoError"/> : 전송 성공
            <br><see cref="F:McQLib.Core.Result.NoResponse"/> : 응답 없음</br>
            <br><see cref="F:McQLib.Core.Result.Com_ActionError"/> ~ <see cref="F:McQLib.Core.Result.Com_NotDefinedError"/> : ERR 필드가 0이 아닌 경우</br></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.InitRegister(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            지정된 ADDR, CH의 상태 레지스터에서 지정된 플래그에 해당하는 오류 플래그를 초기화합니다.
            <br>지정할 플래그는 0인 경우 초기화, 1인 경우 상태 유지입니다. 초기화할 RegisterError0 또는 RegisterError1 플래그들을 Or 연산으로 합친 뒤, Not 연산으로 뒤집어 지정하십시오.</br>
            </summary>
            <param name="addr">초기화할 상태 레지스터의 ADDR입니다.</param>
            <param name="ch">초기화할 상태 레지스터의 CH입니다.</param>
            <param name="reg0">초기화할 첫 번째 바이트의 플래그입니다. RegisterError0 열거형 값을 사용해 Or 연산으로 여러 플래그를 지정할 수 있습니다.</param>
            <param name="reg1">초기화할 두 번째 바이트의 플래그입니다. RegisterError1 열거형 값을 사용해 Or 연산으로 여러 플래그를 지정할 수 있습니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.GetChannelState(McQLib.Core.Address)">
            <summary>
            지정된 채널의 상태 정보를 읽어옵니다.
            <br>이 명령은 채널 전용 명령으로 ByPass로 송신되며, 마스터보드로 보낼 수 없습니다.</br>
            </summary>
            <param name="address">상태 정보를 읽어올 채널의 번호입니다. 0부터 시작합니다.</param>
            <returns>읽어온 채널 상태 정보입니다.</returns>
            <exception cref="F:McQLib.Core.QExceptionType.DEVELOP_WRONG_ADDRESS_USAGE_ERROR">마스터보드로 송신하려고 한 경우</exception>
        </member>
        <member name="M:McQLib.Device.Communicator.RefreshChannelState(McQLib.Core.Address)">
            <summary>
            지정된 채널의 상태를 최신 상태로 갱신하도록 요청합니다.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:McQLib.Device.Communicator.RemoveSavedData">
            <summary>
            SD카드에 저장된 모든 데이터 파일을 삭제합니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.SetTransmissionControl(System.Boolean)">
            <summary>
            데이터 송신 제어권을 설정하거나 해제합니다.
            </summary>
            <param name="onOff"><see langword="true"/>: ON, <see langword="false"/>: OFF</param>
        </member>
        <member name="M:McQLib.Device.Communicator.SaveCalValues(System.String)">
            <summary>
            장비로부터 Calibration 값을 불러와 지정된 경로의 파일에 저장합니다.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:McQLib.Device.Communicator.LoadCalValues(System.String)">
            <summary>
            지정된 경로의 파일로부터 Calibration 값을 읽어와 장비로 설정합니다.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:McQLib.Device.Communicator.Send(McQLib.Device.Packet)">
            <summary>
            패킷을 송신합니다. 응답을 대기하지 않습니다.
            </summary>
            <param name="sendPacket">송신할 패킷입니다.</param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Device.Communicator.Send(McQLib.Device.Packet,System.Int32)">
            <summary>
            패킷을 송신합니다. 이 메서드에서 응답을 대기하지는 않지만 별도의 스레드가 지정된 타임아웃 시간 내에 응답이 오는지 확인합니다.
            <br>지정된 시간 내에 응답이 오지 않는 경우 응답 확인 스레드가 예외를 던집니다.</br>
            </summary>
            <param name="sendPacket">송신할 패킷입니다.</param>
            <param name="timeOutSec">응답이 올 때까지 기다릴 시간(초)입니다. 기본 값은 5입니다.</param>
        </member>
        <member name="M:McQLib.Device.Communicator.SendAndReceive(McQLib.Device.Packet,System.Int32,System.Int32)">
            <summary>
            패킷을 송신하고, 응답 패킷이 올 때까지 대기합니다.
            <br>패킷의 에러는 처리하지 않습니다.</br>
            </summary>
            <param name="sendPacket">송신할 패킷입니다.</param>
            <param name="timeOutSec">응답이 올 때까지 기다릴 시간(초)입니다. 기본 값은 5이며, -1로 설정할 경우 무한 대기합니다.</param>
            <returns>보낸 패킷에 대한 응답 패킷으로 판단된 패킷입니다. 장비가 연결되어 있지 않거나 타임아웃이 발생한 경우 null입니다.</returns>
        </member>
        <member name="P:McQLib.Device.Communicator.IsSendRun">
            <summary>
            송신 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsReceiveRun">
            <summary>
            수신 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsPingRun">
            <summary>
            Ping 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsSplitRun">
            <summary>
            수신 바이트 분리 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsParsingRun">
            <summary>
            패킷 파싱 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Communicator.IsScheduleRun">
            <summary>
            스케쥴러 스레드가 동작중인지의 여부입니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.startAllThreads(System.Int32)">
            <summary>
            모든 Communicator 스레드를 실행합니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.stopAllThreads(System.Int32)">
            <summary>
            모든 Communicator 스레드에 중단 요청을 보낸 후 스레드가 완전히 종료될 때까지 대기합니다.
            </summary>
            <param name="timeOutSec">대기할 시간(초)입니다. -1인 경우 무한히 대기합니다.</param>
            <returns>모든 스레드가 완전히 종료되었다고 판단된 경우 true이고, 타임 아웃인 경우 false입니다.</returns>
        </member>
        <member name="M:McQLib.Device.Communicator.sendLoop">
            <summary>
            sendQueue에 들어온 패킷을 순차적으로 Socket의 NetworkStream에 쓰는 스레드.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.receiveLoop">
            <summary>
            Socket의 DataAvailable이 true일 때 NetworkStream의 모든 바이트를 읽어서 byteQueue에 넣는 스레드.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.splitLoop">
            <summary>
            byteQueue에 들어온 데이터를 STX2부터 ETX2까지 잘라서 packetQueue로 보내는 스레드.
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.pingLoop">
            <summary>
            Communicator.PingInterval(초)마다 SendAndReceive()로 Ping 명령을 보내어 장비 연결 상태를 확인하는 스레드.
            <br><see cref="F:McQLib.Device.Communicator.PingInterval"/>초 내로 Ping에 대한 응답이 오지 않을 경우 Reconnect()로 재연결을 시도한다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.parsingLoop">
            <summary>
            packetQueue에 들어온 데이터를 Packet 객체 형태로 구성하여 처리 Queue로 보내는 스레드
            </summary>
        </member>
        <member name="M:McQLib.Device.Communicator.scheduleLoop">
            <summary>
            각 채널에 지정된 ChannelCommand에 따라 일련의 동작을 수행하는 스레드
            <br>(명령 송수신은 무조건 한 번에 한 채널씩 진행하는 것이 옳으므로)</br>
            </summary>
        </member>
        <member name="T:McQLib.Device.ParsingState">
            <summary>
            패킷의 Parsing 결과를 나타내는 열거형입니다.
            각 상태는 패킷의 필드를 나타내며, Parsing이 종료된 후 <see cref="P:McQLib.Device.Packet.ParsingState"/>가 <see cref="F:McQLib.Device.ParsingState.Complete"/>가 아니라면 해당 필드에서 오류가 발생해 Parsing이 중단됐음을 나타냅니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.STX2">
            <summary>
            STX2 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ADDR2">
            <summary>
            ADDR2 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CH2">
            <summary>
            CH2 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ByPass">
            <summary>
            ByPass 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.LEN2">
            <summary>
            LEN2 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.SubPackets">
            <summary>
            SubPacket 필드 즉, 통합프로토콜1 파트입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.STX">
            <summary>
            STX 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ADDR">
            <summary>
            ADDR 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CH">
            <summary>
            CH 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CMD">
            <summary>
            CMD 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ERR">
            <summary>
            ERR 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.LEN">
            <summary>
            LEN 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.DATA">
            <summary>
            DATA 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CRC">
            <summary>
            CRC 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CRLF">
            <summary>
            저장된 시퀀스 데이터 송신 패킷 전용 State입니다.
            <br>내부 패킷의 사이에 CRLF가 존재하지 않는 경우 이 필드에서 중단됩니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.INNER">
            <summary>
            저장된 시퀀스 데이터 송신 패킷 전용 State입니다.
            <br>내부 패킷을 Packet으로 생성하는 도중 오류가 발생한 경우 이 필드에서 중단됩니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ETX">
            <summary>
            ETX 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.CRC2">
            <summary>
            CRC2 필드입니다.
            <br>일반적으로 CRC2 오류가 발생했을 때 이 필드에서 중단됩니다.</br>
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.ETX2">
            <summary>
            ETX2 필드입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.ParsingState.Complete">
            <summary>
            Parsing이 정상 종료되었음을 의미합니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Packet.SET">
            <summary>
            장비로 명령을 전달할 때 ERR 필드에 사용되는 값입니다. 값을 설정하기 위한 명령입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Packet.GET">
            <summary>
            장비로 명령을 전달할 때 ERR 필드에 사용되는 값입니다. 값을 가져오기 위한 명령입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Packet.ON">
            <summary>
            장비로 명령을 전달할 때 ByPass를 On 하기 위해 사용하는 값입니다.
            </summary>
        </member>
        <member name="F:McQLib.Device.Packet.OFF">
            <summary>
            장비로 명령을 전달할 때 ByPass를 Off 하기 위해 사용하는 값입니다.
            </summary>
        </member>
        <member name="P:McQLib.Device.Packet.SubPacket">
            <summary>
            이 속성은 일반적으로 SubPackets의 첫 번째 요소를 반환합니다.
            </summary>
        </member>
        <member name="M:McQLib.Device.Packet.ToLogText(System.Boolean)">
            <summary>
            패킷 정보를 로그 메시지 형태로 정리하여 반환합니다.
            </summary>
            <param name="rawPacket">로그 메시지에 패킷의 Raw 형태 데이터를 출력할지의 여부입니다.</param>
            <returns>생성된 로그 메시지입니다.</returns>
        </member>
        <member name="T:McQLib.Device.SendPacket">
            <summary>
            보내기 전용 패킷입니다.
            <br>ADDR2, CH2, ByPass 및 SubPackets 필드만 쓰기 가능, 나머지는 읽기 전용입니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Device.SendPacket.#ctor(McQLib.Core.Address)">
            <summary>
            지정된 주소로 송신하기 위한 패킷을 생성합니다.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:McQLib.Device.SendPacket.#ctor(McQLib.Core.Address,System.Enum)">
            <summary>
            지정된 주소로 송신하기 위한 패킷을 생성합니다.
            <br>기본적으로 1개의 내부 패킷을 지정된 커멘드로 함께 생성합니다.</br>
            </summary>
            <param name="address">패킷의 목적지 주소입니다.</param>
            <param name="command">패킷에 추가할 명령어입니다.</param>
        </member>
        <member name="M:McQLib.Device.SendSubPacket.#ctor(System.Enum)">
            <summary>
            지정된 커멘드를 사용하여 새로운 SendSubPacket 인스턴스를 생성합니다.
            <br>ERR 필드는 0, DATA 필드는 Empty로 초기화됩니다.</br>
            </summary>
            <param name="cmd">SendSubPacket에 추가할 명령어입니다.</param>
        </member>
        <member name="M:McQLib.Device.SendSubPacket.#ctor(System.Enum,System.Byte)">
            <summary>
            지정된 커멘드와 Error/Query 필드 값을 사용하여 새로운 SendSubPacket 인스턴스를 생성합니다.
            <br>DATA 필드는 Empty로 초기화됩니다.</br>
            </summary>
            <param name="cmd">SendSubPacket에 추가할 명령어입니다.</param>
            <param name="err">SendSubPacket에 추가할 Error/Query 필드 값입니다.</param>
        </member>
        <member name="M:McQLib.Device.SendSubPacket.#ctor(System.Enum,System.Byte,System.Byte[])">
            <summary>
            지정된 커멘드, Error/Query 필드 값 및 DATA 필드 값을 사용하여 새로운 SendSubPacket 인스턴스를 생성합니다.
            </summary>
            <param name="cmd">SendSubPacket에 추가할 명령어입니다.</param>
            <param name="err">SendSubPacket에 추가할 Error/Query 필드 값입니다.</param>
            <param name="data">SendSubPacket에 추가할 DATA 필드 값입니다.</param>
        </member>
        <member name="M:McQLib.Device.ReceivedPacket.Parse(System.Byte[],System.Int32)">
            <summary>
            지정된 <see cref="T:System.Byte"/>형식 배열로 구성된 Raw Packet 데이터를 사용하여 새로운 <see cref="T:McQLib.Device.ReceivedPacket"/> 인스턴스를 구조화합니다.
            <br>이 메서드는 언제나 <see cref="T:McQLib.Device.ReceivedPacket"/>의 인스턴스를 생성하여 반환합니다. 반환되는 패킷을 사용하기 전에 <seealso cref="!:Q730.ParsingState"/> <see cref="P:McQLib.Device.ReceivedPacket.ParsingState"/> 필드를 통해 패킷의 무결성을 확인하십시오.</br>
            </summary>
            <param name="rawPacket"><see cref="T:McQLib.Device.ReceivedPacket"/>을 구성할 Raw Packet 데이터입니다.</param>
            <returns>생성된 <see cref="T:McQLib.Device.ReceivedPacket"/> 인스턴스입니다.</returns>
        </member>
        <member name="M:McQLib.Device.ReceivedSubPacket.Parse(System.Byte[],McQLib.Device.ReceivedSubPacket@)">
            <summary>
            통합 프로토콜II로 감싸지지 않은 단일 통합 프로토콜I의 패킷을 파싱하기 위한 메서드입니다.
            </summary>
            <param name="rawPacket"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Device.ReceivedSubPacket.Parse(System.Byte[],System.Int32@,System.Byte@,McQLib.Device.ReceivedSubPacket@)">
            <summary>
            이 메서드는 <seealso cref="!:ReceivedPacket.Parse(byte[])"/> 메서드를 통해 호출되어야 합니다. 이 메서드를 직접 호출하지 마십시오.
            </summary>
            <param name="rawPacket">현재 파싱중인 패킷의 전체 Raw Packet 데이터입니다.</param>
            <param name="position">현재 파싱중인 위치입니다.</param>
            <param name="crc2">현재 파싱중인 패킷의 계산중인 crc2 값입니다.</param>
            <param name="sub">생성된 서브 패킷의 반환을 위한 out 형식 파라미터입니다.</param>
            <returns>서브 패킷의 파싱 결과를 나타내는 ParsingState입니다.</returns>
        </member>
        <member name="T:McQLib.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_AcResistance">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_AnodeCharge">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_AnodeDischarge">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Charge">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Cyc">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Cycle">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_DcResistance">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Discharge">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_End">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_FrequencyResponse">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Idle">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Jump">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Label">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Loop">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_OpenCircuitVoltage">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Pattern">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Rest">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_Temperature">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:McQLib.Properties.Resources.Icon_TransientResponse">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="T:McQLib.Recipes.BaseConvertableRecipe">
            <summary>
            패킷으로 변환이 필요한 모든 레시피 클래스의 안전 조건, 종료 조건 및 기록 조건에 대한 패킷 변환 메서드를 구현하는 차상위 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.BaseConvertableRecipe.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 장비로 송신하기 위한 DATA Field로 변환합니다.
            <br>기본적으로 안전 조건, 종료 조건 및 기록 조건에 대한 정보를 DATA Field 형태로 구성하도록 구현되어 있습니다.</br>
            <br>안전 조건 58Byte, 종료 조건에 대한 사용 여부 2Byte, 각 종료 조건의 설정값 78Byte, 기록 조건에 대한 사용 여부 2Byte, 각 기록 조건의 설정값 24Byte로 총 164Byte입니다.</br>
            </summary>
            <param name="stepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="endStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <param name="errorStepNo_notUsed">사용되지 않는 매개변수입니다.</param>
            <returns>안전 조건, 종료 조건, 기록 조건에 대한 DATA Field입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.BaseConvertableRecipe.FromDataField(System.Byte[])">
            <summary>
            DATA Field로부터 레시피 정보를 추출합니다.
            <br>기본적으로 안전 조건, 종료 조건 및 기록 조건에 대한 정보를 DATA Field로부터 읽어와 구성하도록 구현되어 있습니다.</br>
            <br>안전 조건에 대한 사용 여부 2Byte, 각 안전 조건의 설정값 58Byte, 종료 조건에 대한 사용 여부 2Byte, 각 종료 조건의 설정값 78Byte, 기록 조건에 대한 사용 여부 2Byte, 각 기록 조건의 설정값 24Byte로 총 164Byte를 사용하여 구성합니다.</br>
            </summary>
            <returns> DATA Field로부터 안전 조건, 종료 조건, 기록 조건을 성공적으로 추출했는지의 여부입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Recipe">
            <summary>
            모든 레시피 클래스의 패킷에 포함되는 안전 조건, 종료 조건 및 기록 조건에 대한 속성을 구현하는 최상위 클래스입니다.
            </summary>
        </member>
        <member name="P:McQLib.Recipes.Recipe.Name">
            <summary>
            레시피의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:McQLib.Recipes.Recipe.Error">
            <summary>
            시퀀스를 패킷으로 변환하는 과정에서 레시피 오류가 발생했을 경우 발생한 위치를 표기하기 위한 플래그입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Recipe.GetManualString">
            <summary>
            레시피의 설명 정보를 반환합니다.
            </summary>
            <returns>레시피의 설명 정보입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Recipe.GetSummaryString">
            <summary>
            레시피의 요약 정보를 반환합니다.
            </summary>
            <returns>레시피의 요약 정보입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Recipe.GetDetailString">
            <summary>
            툴팁에 표시하기 위한 레시피의 세부 정보를 반환합니다.
            </summary>
            <returns>레시피의 세부 정보입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Recipe.Refresh">
            <summary>
            속성의 값에 따라 다른 속성의 특성이나 값이 변경되어야 한다면 아래 메서드에 관련된 처리를 구현하십시오.
            <br>PropertyGrid에 지정되는 레시피 인스턴스가 변경될 때 이 메서드를 호출하도록 하십시오.</br>
            <br>여러 단계 파생되었다면 이 메서드를 재정의 할 때 반드시 부모 클래스의 이 메서드도 함께 호출하십시오.</br>
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Recipe.Clone">
            <summary>
            이 레시피의 복사본을 생성합니다.
            <br><see cref="M:McQLib.Recipes.Recipe.Clone"/>은 레시피 복사/붙여넣기 기능과 Sequence.CopyTo() 메서드를 위해 레시피의 깊은 복사를 구현합니다.</br>
            <br>여기서 깊은 복사라 함은, 레시피에 속한 모든 필드와 필드 형태의 속성(단순히 get과 set으로 접근/설정만 가능한 필드처럼 사용되는 속성)의 완전한 깊은 복사를 의미합니다.</br>
            </summary>
            <returns>레시피의 복사본입니다.</returns>
        </member>
        <member name="P:McQLib.Recipes.Recipe.SaveCondition">
            <summary>
            IRecipe을 구현하는 레시피가 안전 조건을 필요로 한다면 이 속성이 SafetyCondition 개체를 반환하도록 하십시오.
            </summary>
        </member>
        <member name="P:McQLib.Recipes.Recipe.EndCondition">
            <summary>
            IRecipe을 구현하는 레시피가 종료 조건을 필요로 한다면 이 속성이 EndCondition 개체를 반환하도록 하십시오.
            </summary>
        </member>
        <member name="P:McQLib.Recipes.Recipe.SafetyCondition">
            <summary>
            IRecipe을 구현하는 레시피가 기록 조건을 필요로 한다면 이 속성이 SaveCondition 개체를 반환하도록 하십시오.
            </summary>
        </member>
        <member name="T:McQLib.Recipes.EndCondition">
            <summary>
            종료 조건에 대한 설정값을 구성하는 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.EndCondition.ToDataField">
            <summary>
            설정된 종료 조건에 대한 정보를 패킷에 포함될 수 있는 DATA 필드 형태로 구성하여 반환합니다.
            </summary>
            <returns>안전 조건을 DATA 필드 형태로 구성한 80Byte 길이의 byte 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.EndCondition.FromDataField(System.Byte[])">
            <summary>
            바이트 형태의 DATA 필드에서 종료 조건을 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 138부터 217까지의 총 80개의 바이트를 사용합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:McQLib.Recipes.SafetyCondition">
            <summary>
            안전 조건에 대한 설정값을 구성하는 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.SafetyCondition.ToDataField">
            <summary>
            설정된 안전 조건에 대한 정보를 패킷에 포함될 수 있는 DATA 필드 형태로 구성하여 반환합니다.
            </summary>
            <returns>안전 조건을 DATA 필드 형태로 구성한 58Byte 길이의 byte 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.SafetyCondition.FromDataField(System.Byte[])">
            <summary>
            바이트 형태의 DATA 필드에서 안전 조건을 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 80부터 137까지의 총 58개의 바이트를 사용합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:McQLib.Recipes.SaveCondition">
            <summary>
            기록 조건에 대한 설정값을 구성하는 클래스입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.SaveCondition.ToDataField">
            <summary>
            설정된 기록 조건에 대한 정보를 패킷에 포함될 수 있는 DATA 필드 형태로 구성하여 반환합니다.
            </summary>
            <returns>안전 조건을 DATA 필드 형태로 구성한 26Byte 길이의 byte 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.SaveCondition.FromDataField(System.Byte[])">
            <summary>
            바이트 형태의 DATA 필드에서 종료 조건을 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 218부터 243까지의 총 26개의 바이트를 사용합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:McQLib.Recipes.RecipeFactory.Recipes">
            <summary>
            기본적으로 제공되는 레시피 목록입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.RecipeFactory.CreateInstance(McQLib.Recipes.RecipeType)">
            <summary>
            라이브러리 외부에서 생성 가능하도록 할 레시피는 레시피 타입과 함께 이곳에서 처리한다.
            </summary>
            <param name="recipeType"></param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Recipes.RecipeSetting.Load">
            <summary>
            저장된 구성 설정 정보를 불러옵니다.
            <br>현재 설정 정보가 저장되지 않은 경우 변경 사항을 잃게 됩니다.</br>
            </summary>
            <returns></returns>
        </member>
        <member name="M:McQLib.Recipes.RecipeSetting.Save">
            <summary>
            현재 구성 설정 정보를 저장합니다.
            <br>기존 설정 정보가 존재하는 경우 덮어씌워집니다.</br>
            </summary>
        </member>
        <member name="M:McQLib.Recipes.RecipeSetting.Initialize">
            <summary>
            구성 설정 정보를 초기값으로 설정하고 저장합니다.
            <br>기존 설정 정보가 존재하는 경우 모든 설정값이 초기화됩니다.</br>
            </summary>
        </member>
        <member name="T:McQLib.Recipes.AcResistance">
            <summary>
            AC Resistance(ACR) 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.AcResistance.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.AnodeCharge">
            <summary>
            Charge 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.AnodeCharge.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.AnodeCharge.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.AnodeDischarge">
            <summary>
            Charge 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.AnodeDischarge.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.AnodeDischarge.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Charge">
            <summary>
            Charge 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Charge.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Charge.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Cycle">
            <summary>
            Cycle 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Cycle.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Cycle.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.DcResistance">
            <summary>
            DC Resistance(DCR) 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.DcResistance.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Discharge">
            <summary>
            Discharge 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Discharge.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Discharge.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.FrequencyResponse">
            <summary>
            Frequency Response(FR/FRA) 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.FrequencyResponse.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Jump.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Jump.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Loop">
            <summary>
            Loop 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Loop.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Loop.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.OpenCircuitVoltage">
            <summary>
            Open Circuit Voltage(OCV) 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.OpenCircuitVoltage.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Pattern">
            <summary>
            Pattern 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Pattern.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.Rest">
            <summary>
            Rest 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Rest.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Rest.FromDataField(System.Byte[])">
            <summary>
            패킷의 DATA Field 형태로부터 레시피 정보를 추출합니다. 이 메서드는 지정된 바이트 배열의 인덱스 0부터 259까지의 총 260개의 바이트를 사용합니다.
            </summary>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.TransientResponse">
            <summary>
            Transient Response(TR/TRA) 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.TransientResponse.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo">현재 레시피가 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <param name="errorStepNo">현재 레시피가 비정상 종료된 후 이동할 목표 레시피의 시퀀스상 순번입니다.</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="T:McQLib.Recipes.End">
            <summary>
            End 레시피입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.End.ToDataField(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            레시피 정보를 패킷의 DATA Field 형태로 변환합니다.
            <br>시퀀스의 마지막 스텝에 자동으로 추가되는 레시피로, 이 클래스의 인스턴스를 라이브러리 외부에서 직접 만들어서 사용할 수 없습니다.</br>
            </summary>
            <param name="stepNo">현재 레시피의 시퀀스상 순번입니다.</param>
            <param name="endStepNo_NotUsed">사용되지 않음(stepNo와 같은 값으로 사용됩니다.)</param>
            <param name="errorStepNo_NotUsed">사용되지 않음(stepNo와 같은 값으로 사용됩니다.)</param>
            <returns>변환된 DATA Field 형태의 byte형식 배열입니다.</returns>
        </member>
        <member name="P:McQLib.Recipes.Sequence.Name">
            <summary>
            시퀀스의 이름입니다.
            <br>시퀀스가 실제로 저장되는 경로와 파일명은 "Application.StartupPath\Sequence\Name.seq"입니다. </br>
            </summary>
        </member>
        <member name="P:McQLib.Recipes.Sequence.IsChanged">
            <summary>
            시퀀스가 수정되었는지의 여부입니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Sequence.#ctor">
            <summary>
            비어있는 상태의 시퀀스 인스턴스를 생성합니다.
            </summary>
        </member>
        <member name="M:McQLib.Recipes.Sequence.FromFile(System.String)">
            <summary>
            지정된 경로의 시퀀스 파일로부터 시퀀스 정보를 읽어와 시퀀스의 인스턴스를 생성합니다.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:McQLib.Recipes.Sequence.ToPacketArray(System.Byte,System.Byte)">
            <summary>
            현재 시퀀스를 장비로 송신하기 위한 패킷 배열을 생성하여 반환합니다.
            <br>현재 메서드를 통해 반환되는 패킷 배열을 순서대로 장비에 모두 송신하십시오.</br>
            </summary>
            <param name="addr">현재 시퀀스를 수신할 채널이 위치하는 보드의 번호입니다.</param>
            <param name="ch">현재 시퀀스를 수신할 채널의 번호입니다.</param>
            <returns>생성된 패킷 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Sequence.ToPacketArray_Old(System.Byte,System.Byte)">
            <summary>
            현재 시퀀스를 장비로 송신하기 위한 패킷 배열을 생성하여 반환합니다.
            <br>현재 메서드를 통해 반환되는 패킷 배열을 순서대로 장비에 모두 송신하십시오.</br>
            </summary>
            <param name="addr">현재 시퀀스를 수신할 채널이 위치하는 보드의 번호입니다.</param>
            <param name="ch">현재 시퀀스를 수신할 채널의 번호입니다.</param>
            <returns>생성된 패킷 배열입니다.</returns>
        </member>
        <member name="M:McQLib.Recipes.Sequence.GetTotalSteps">
            <summary>
            현재 시퀀스의 전체 스텝 수를 계산하여 반환합니다.
            <br>Cycle, Loop, Jump 및 End 레시피도 전체 스텝 수에 포함됩니다.</br>
            </summary>
            <returns>
            1보다 큰 정수 : 계산된 전체 스텝 수
            <br>1 : 시퀀스가 빈 경우 (End 레시피만 세어진 경우)</br>
            <br>-1 : Cycle-Loop 짝이 맞지 않는 경우</br>
            <br>-2 : Jump-Label 짝이 맞지 않는 경우</br>
            </returns>
        </member>
        <member name="M:McQLib.OldSupport.OldPattern.TryConvert(System.String,System.String)">
            <summary>
            구 버전 Q730 소프트웨어에서 생성한 패턴 데이터 파일을 신규 Q730 패턴 형식 파일로 변환합니다.
            </summary>
            <param name="oldFile">변환할 구 버전 패턴 데이터 파일의 전체 경로입니다.</param>
            <param name="newFile">변환된 패턴 데이터를 저장할 파일의 전체 경로입니다.</param>
            <returns>변환에 성공한 경우 true이고, 그렇지 않은 경우 false입니다.</returns>
        </member>
    </members>
</doc>
